<?php

/**
 * @file
 * Adds project, version and date information to projects checked out of git.
 */

use Drupal\Core\Extension\Extension;

/**
 * Implements hook_system_info_alter().
 */
function git_deploy_system_info_alter(array &$info, Extension $file, $type) {
  static $core_info = NULL;

  $is_core = ($file->origin === 'core') && array_key_exists('version', $info)  &&  preg_match('!-dev$!', $info['version']);
  if ($is_core) {
    // If a core version check already happened, just reuse that info.
    if (!empty($core_info)) {
      $info['version'] = $core_info['version'];
      $info['datestamp'] = $core_info['datestamp'];
      return;
    }
    $core_info = array();
    // Make sure the version checking happens for checkouts posing as
    // development versions.
    unset($info['version']);
  }

  if (empty($info['version'])) {
    $directory = $file->subpath;
    while ($directory && !file_exists("$directory/.git")) {
      $directory = substr($directory, 0,  strrpos($directory, '/'));
    }
    $git_dir = DRUPAL_ROOT . (empty($directory) ? '' : '/') . "$directory/.git";
    if (file_exists($git_dir)) {
      $git = "git --git-dir $git_dir";
      // Find first the project name based on fetch URL.
      // Eat error messages. >& is valid on Windows, too. Also, $output does
      // not need initialization because it's taken by reference.
      exec("$git remote show -n origin 2>&1", $output);
      if ($fetch_url = preg_grep('/^\s*Fetch URL:/', $output)) {
        $fetch_url = current($fetch_url);
        $project_name = substr($fetch_url, strrpos($fetch_url, '/') + 1);
        if (substr($project_name, -4) == '.git') {
          $project_name = substr($project_name, 0, -4);
        }
        $info['project'] = $project_name;
      }
      // Try to fill in branch and tag.
      exec("$git rev-parse --abbrev-ref HEAD 2>&1", $branch);
      $tag_found = FALSE;
      if ($branch) {
        $branch = $branch[0];
        // Any Drupal-formatted branch.
        $branch_preg =  '\d+\.x-\d+\.';
        if (preg_match('/^' . $branch_preg . 'x$/', $branch)) {
          $info['version'] = $branch . '-dev';
          // Nail down the core and the major version now that we know
          // what they are.
          $branch_preg = preg_quote(substr($branch, 0, -1));
        }
        // Now try to find a tag.
        exec("$git rev-list --topo-order --max-count=1 HEAD 2>&1", $last_tag_hash);
        if ($last_tag_hash) {
          exec("$git describe  --tags $last_tag_hash[0] 2>&1", $last_tag);
          if ($last_tag) {
            $last_tag = $last_tag[0];
            // Make sure the tag starts as Drupal formatted (for eg.
            // 7.x-1.0-alpha1) and if we are on a proper branch (ie. not
            // master) then it's on that branch.
            if (!$is_core) {
              $tag_preg = '/^(' . $branch_preg . '\d+(?:-[^-]+)?)(-(\d+-)g[0-9a-f]{7})?$/';
            }
            else {
              $tag_preg = '/^(\d\.\d\.\d+(?:-[^-]+)?)(-(\d+-)g[0-9a-f]{7})?$/';
            }
            if (preg_match($tag_preg, $last_tag, $matches)) {
              $tag_found = TRUE;
              $info['version'] = isset($matches[2]) ? $matches[1] . '+' . $matches[3] . 'dev' : $last_tag;
            }
          }
        }
      }
      if (!$tag_found) {
        $last_tag = '';
      }
      // The git log -1 command always succeeds and if we are not on a
      // tag this will happen to return the time of the last commit which
      // is exactly what we wanted.
      exec("$git log -1 --pretty=format:%at $last_tag 2>&1", $datestamp);
      if ($datestamp && is_numeric($datestamp[0])) {
        $info['datestamp'] = $datestamp[0];
      }

      if ($is_core) {
        $core_info['version'] = $info['version'];
        $core_info['datestamp'] = $info['datestamp'];
      }
    }
  }
}
